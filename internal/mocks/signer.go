// Code generated by MockGen. DO NOT EDIT.
// Source: sigsum.org/key-mgmt/pkg/agent (interfaces: Signer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSSHSigner is a mock of Signer interface.
type MockSSHSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSSHSignerMockRecorder
}

// MockSSHSignerMockRecorder is the mock recorder for MockSSHSigner.
type MockSSHSignerMockRecorder struct {
	mock *MockSSHSigner
}

// NewMockSSHSigner creates a new mock instance.
func NewMockSSHSigner(ctrl *gomock.Controller) *MockSSHSigner {
	mock := &MockSSHSigner{ctrl: ctrl}
	mock.recorder = &MockSSHSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHSigner) EXPECT() *MockSSHSignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockSSHSigner) Sign(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSSHSignerMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSSHSigner)(nil).Sign), arg0)
}
